<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter学习笔记</title>
      <link href="/hexoBlog/posts/1134849698/"/>
      <url>/hexoBlog/posts/1134849698/</url>
      
        <content type="html"><![CDATA[<p>导入依赖包</p><ol><li><p>在pubspec.yaml文件中配置依赖包名及版本号</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line"><span class="attr">cupertino_icons:</span> <span class="string">^0.1.2</span></span><br><span class="line"><span class="attr">webview_flutter:</span> <span class="string">^0.3.19+5</span></span><br></pre></td></tr></table></figure></li><li><p>终端执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></figure></li><li><p>运行项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 移动端 </tag>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native学习笔记</title>
      <link href="/hexoBlog/posts/1263558066/"/>
      <url>/hexoBlog/posts/1263558066/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>以Windows系统下开发Android应用所需的环境为例，Linux或iOS环境搭建请参考React-Native官网：<a href="https://reactnative.cn/docs/getting-started.html">https://reactnative.cn/docs/getting-started.html</a></p><ol><li><p>安装前端开发工具 VS Code：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p></li><li><p>安装脚手架运行依赖的 Node.js（版本必须大于等于10）：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></li><li><p>安装JS包管理工具 Yarn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yarn -g</span><br></pre></td></tr></table></figure></li><li><p>安装React Native命令行工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-native-cli -g</span><br></pre></td></tr></table></figure></li><li><p>安装JDK1.8</p></li><li><p>安装Android Studio</p></li><li><p>安装Python2</p></li><li><p>安装安卓模拟器（可使用AS自带的AVD，也可安装第三方模拟器）</p></li><li><p>创建React Native项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init 项目名</span><br></pre></td></tr></table></figure></li><li><p>检查模拟器或手机进程是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br></pre></td></tr></table></figure></li><li><p>RN项目启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn run android</span><br><span class="line">yarn run start</span><br></pre></td></tr></table></figure></li></ol><h1 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h1><ul><li><p>安装React Navigation核心包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-navigation react-native-gesture-handler react-native-reanimated react-native-screens</span><br></pre></td></tr></table></figure></li><li><p>顶部导航（页面切换）：createStackNavigator</p><ol><li><p>安装顶部导航依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-navigation-stack</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>底部导航：createBottomTabNavigator</p><ol><li><p>安装底部导航依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-navigation-tabs</span><br></pre></td></tr></table></figure></li><li><p>引入App容器和底部导航（React Navigation3.x以上版本导航必须在App容器内）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createAppContainer&#125; <span class="keyword">from</span> <span class="string">&#x27;react-navigation&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createBottomTabNavigator&#125; <span class="keyword">from</span> <span class="string">&#x27;react-navigation-tabs&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>引入导航跳转相应的页面组件（根据项目需求自行定义）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HomeScreen <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> MineScreen <span class="keyword">from</span> <span class="string">&#x27;../components/Mine&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>配置底部导航栏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TabNavigator = createBottomTabNavigator(&#123;</span><br><span class="line">  Home: &#123;</span><br><span class="line">    screen: HomeScreen,</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      tabBarLabel: <span class="string">&quot;主页&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  Mine: &#123;</span><br><span class="line">    screen: MineScreen,</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      tabBarLabel: <span class="string">&quot;我的&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createAppContainer(TabNavigator);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>引导页：createSwitchNavigator</p></li></ul><h1 id="布局样式"><a href="#布局样式" class="headerlink" title="布局样式"></a>布局样式</h1><p>React-Native 的样式基本上是实现了 CSS 的一个子集，并且属性名不完全一致。<br>外联布局：<code>style=&#123;styles.container&#125;</code><br>内联布局：<code>style=&#123;&#123;flex:1,width:50,height:100&#125;&#125;</code><br>多个布局：<code>style=&#123;[styles.container,&#123;width:50,height:100&#125;]&#125;</code></p><h2 id="Text-文本"><a href="#Text-文本" class="headerlink" title="Text 文本"></a>Text 文本</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>color</td><td>对应 CSS 中的 color 属性</td></tr><tr><td>fontFamily</td><td>string</td><td>对应 CSS 中的 font-family 属性</td></tr><tr><td>fontSize</td><td>number</td><td>对应 CSS 中的 font-size 属性</td></tr><tr><td>fontStyle</td><td>normal／italic</td><td>对应 CSS 中的 font-style 属性，但阉割了 oblique 取值</td></tr><tr><td>fontWeight</td><td>normal／bold／100~900</td><td>对应 CSS 中的 font-weight 属性，但阉割了 bolder／lighter 取值</td></tr><tr><td>lineHeight</td><td>number</td><td>对应 CSS 中的 line-height 属性</td></tr><tr><td>textAlign</td><td>auto／left／right／center／justify <code>iOS</code></td><td>对应 CSS 中的 text-align 属性，增加了 auto 取值</td></tr><tr><td>textAlignVertical <code>Android</code></td><td>auto／top／bottom／center</td><td>对应 CSS 中的 vertical-align 属性，增加了 auto 取值，center 取代了 middle，并阉割了 baseline／sub等值</td></tr><tr><td>textShadowColor</td><td>color</td><td>对应 CSS 中的 text-shadow 属性中的颜色定义</td></tr><tr><td>textShadowOffset</td><td>{ width: number, height: number }</td><td>对应 CSS 中的 text-shadow 属性中的阴影偏移定义</td></tr><tr><td>textShadowRadius</td><td>number</td><td>在 CSS 中，阴影的圆角大小取决于元素的圆角定义，不需要额外定义</td></tr><tr><td>letterSpacing <code>iOS</code></td><td>number</td><td>对应 CSS 中的 letter-spacing 属性，但取值不同</td></tr><tr><td>textDecorationColor <code>iOS</code></td><td>color</td><td>对应 CSS 中的 text-decoration-color 属性</td></tr><tr><td>textDecorationLine <code>iOS</code></td><td>none／underline／line-through／underline line-through</td><td>对应 CSS 中的 text-decoration-line 属性，但阉割了 overline／blink 取值</td></tr><tr><td>textDecorationStyle <code>iOS</code></td><td>solid／double／dotted／dashed</td><td>对应 CSS 中的 text-decoration-style 属性，但阉割了 wavy 取值</td></tr><tr><td>writingDirection <code>iOS</code></td><td>auto／ltr／rtl</td><td>对应 CSS 中的 direction 属性，增加了 auto 取值</td></tr></tbody></table><h2 id="Dimension-尺寸"><a href="#Dimension-尺寸" class="headerlink" title="Dimension 尺寸"></a>Dimension 尺寸</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>number</td><td>对应 CSS 中的 width 属性</td></tr><tr><td>height</td><td>number</td><td>对应 CSS 中的 height 属性</td></tr></tbody></table><h2 id="Positioning-定位"><a href="#Positioning-定位" class="headerlink" title="Positioning 定位"></a>Positioning 定位</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>absolute／relative</td><td>对应 CSS 中的 position 属性，但阉割了 static, fixed 取值</td></tr><tr><td>top</td><td>number</td><td>对应 CSS 中的 top 属性</td></tr><tr><td>right</td><td>number</td><td>对应 CSS 中的 right 属性</td></tr><tr><td>bottom</td><td>number</td><td>对应 CSS 中的 bottom 属性</td></tr><tr><td>left</td><td>number</td><td>对应 CSS 中的 left 属性</td></tr></tbody></table><h2 id="Margin-外部"><a href="#Margin-外部" class="headerlink" title="Margin 外部"></a>Margin 外部</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>margin</td><td>number</td><td>对应 CSS 中的 margin 属性，不过只能定义一个参数，表示上右下左4个方位的外补白</td></tr><tr><td>marginHorizontal</td><td>number</td><td>CSS中没有对应的属性，相当于同时设置 marginRight 和 marginLeft</td></tr><tr><td>marginVertical</td><td>number</td><td>CSS中没有对应的属性，相当于同时设置 marginTop 和 marginBottom</td></tr><tr><td>marginTop</td><td>number</td><td>对应 CSS 中的 margin-top 属性</td></tr><tr><td>marginRight</td><td>number</td><td>对应 CSS 中的 margin-right 属性</td></tr><tr><td>marginBottom</td><td>number</td><td>对应 CSS 中的 margin-bottom 属性</td></tr><tr><td>marginLeft</td><td>number</td><td>对应 CSS 中的 margin-left 属性</td></tr></tbody></table><h2 id="Padding-内部"><a href="#Padding-内部" class="headerlink" title="Padding 内部"></a>Padding 内部</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>padding</td><td>number</td><td>对应 CSS 中的 padding 属性，不过只能定义一个参数，表示上右下左4个方位的内补白</td></tr><tr><td>paddingHorizontal</td><td>number</td><td>CSS中没有对应的属性，相当于同时设置 paddingRight 和 paddingLeft</td></tr><tr><td>paddingVertical</td><td>number</td><td>CSS中没有对应的属性，相当于同时设置 paddingTop 和 paddingBottom</td></tr><tr><td>paddingTop</td><td>number</td><td>对应 CSS 中的 padding-top 属性</td></tr><tr><td>paddingRight</td><td>number</td><td>对应 CSS 中的 padding-right 属性</td></tr><tr><td>paddingBottom</td><td>number</td><td>对应 CSS 中的 padding-bottom 属性</td></tr><tr><td>paddingLeft</td><td>number</td><td>对应 CSS 中的 padding-left 属性</td></tr></tbody></table><h2 id="Border-边框"><a href="#Border-边框" class="headerlink" title="Border 边框"></a>Border 边框</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>borderStyle</td><td>solid／dotted／dashed</td><td>对应 CSS 中的 border-style 属性，但阉割了 none／hidden／double／groove／ridge／inset／outset 取值，且无方向分拆属性</td></tr><tr><td>borderWidth</td><td>number</td><td>对应 CSS 中的 border-width 属性</td></tr><tr><td>borderTopWidth</td><td>number</td><td>对应 CSS 中的 border-top-width 属性</td></tr><tr><td>borderRightWidth</td><td>number</td><td>对应 CSS 中的 border-right-width 属性</td></tr><tr><td>borderBottomWidth</td><td>number</td><td>对应 CSS 中的 border-bottom-width 属性</td></tr><tr><td>borderLeftWidth</td><td>number</td><td>对应 CSS 中的 border-left-width 属性</td></tr><tr><td>borderColor</td><td>color</td><td>对应 CSS 中的 border-color 属性</td></tr><tr><td>borderTopColor</td><td>color</td><td>对应 CSS 中的 border-top-color 属性</td></tr><tr><td>borderRightColor</td><td>color</td><td>对应 CSS 中的 border-right-color 属性</td></tr><tr><td>borderBottomColor</td><td>color</td><td>对应 CSS 中的 border-bottom-color 属性</td></tr><tr><td>borderLeftColor</td><td>color</td><td>对应 CSS 中的 border-left-color 属性</td></tr><tr><td>borderRadius</td><td>number</td><td>对应 CSS 中的 border-radius 属性</td></tr><tr><td>borderTopLeftRadius</td><td>number</td><td>对应 CSS 中的 border-top-left-radius 属性</td></tr><tr><td>borderTopRightRadius</td><td>number</td><td>对应 CSS 中的 border-top-right-radius 属性</td></tr><tr><td>borderBottomLeftRadius</td><td>number</td><td>对应 CSS 中的 border-bottom-left-radius 属性</td></tr><tr><td>borderBottomRightRadius</td><td>number</td><td>对应 CSS 中的 border-bottom-right-radius 属性</td></tr><tr><td>shadowColor</td><td>color</td><td>对应 CSS 中的 box-shadow 属性中的颜色定义</td></tr><tr><td>shadowOffset</td><td>{width: number, height: number}</td><td>对应 CSS 中的 box-shadow 属性中的阴影偏移定义</td></tr><tr><td>shadowRadius</td><td>number</td><td>在 CSS 中，阴影的圆角大小取决于元素的圆角定义，不需要额外定义</td></tr><tr><td>shadowOpacity</td><td>number</td><td>对应 CSS 中的 box-shadow 属性中的阴影透明度定义</td></tr></tbody></table><h2 id="Background-背景"><a href="#Background-背景" class="headerlink" title="Background 背景"></a>Background 背景</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>backgroundColor</td><td>color</td><td>对应 CSS 中的 background-color 属性</td></tr></tbody></table><h2 id="Transform-转换"><a href="#Transform-转换" class="headerlink" title="Transform 转换"></a>Transform 转换</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>transform</td><td>[{perspective: number}, {rotate: string}, {rotateX: string}, {rotateY: string}, {rotateZ: string}, {scale: number}, {scaleX: number}, {scaleY: number}, {translateX: number}, {translateY: number}, {skewX: string}, {skewY: string}]</td><td>对应 CSS 中的 transform 属性</td></tr><tr><td>transformMatrix</td><td>TransformMatrixPropType</td><td>类似于 CSS 中 transform 属性的 matrix() 和 matrix3d() 函数</td></tr><tr><td>backfaceVisibility</td><td>visible／hidden</td><td>对应 CSS 中的 backface-visibility 属性</td></tr></tbody></table><h2 id="Flexbox-弹性盒"><a href="#Flexbox-弹性盒" class="headerlink" title="Flexbox 弹性盒"></a>Flexbox 弹性盒</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>flex</td><td>number</td><td>对应 CSS 中的 flex 属性</td></tr><tr><td>flexDirection</td><td>row／column</td><td>对应 CSS 中的 flex-direction 属性，但阉割了 row-reverse／column-reverse 取值</td></tr><tr><td>flexWrap</td><td>wrap／nowrap</td><td>对应 CSS 中的 flex-wrap 属性，但阉割了 wrap-reverse 取值</td></tr><tr><td>justifyContent</td><td>flex-start／flex-end／center／space-between／space-around</td><td>对应 CSS 中的 justify-content 属性，但阉割了 stretch 取值</td></tr><tr><td>alignItems</td><td>flex-start／flex-end／center／stretch</td><td>对应 CSS 中的 align-items 属性，但阉割了 baseline 取值</td></tr><tr><td>alignSelf</td><td>auto／flex-start／flex-end／center／stretch</td><td>对应 CSS 中的 align-self 属性，但阉割了 baseline 取值</td></tr></tbody></table><h2 id="Other-其他"><a href="#Other-其他" class="headerlink" title="Other 其他"></a>Other 其他</h2><table><thead><tr><th>属性名</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>opacity</td><td>number</td><td>对应 CSS 中的 opacity 属性</td></tr><tr><td>overflow</td><td>visible／hidden</td><td>对应 CSS 中的 overflow 属性，但阉割了 scroll／auto 取值</td></tr><tr><td>elevation <code>Android</code></td><td>number</td><td>CSS中没有对应的属性，只在 Android5.0+ 上有效</td></tr><tr><td>resizeMode</td><td>cover／contain／stretch</td><td>CSS中没有对应的属性，可以参考 background-size 属性</td></tr><tr><td>overlayColor <code>Android</code></td><td>string</td><td>CSS中没有对应的属性，当图像有圆角时，将角落都充满一种颜色</td></tr><tr><td>tintColor <code>iOS</code></td><td>color</td><td>CSS中没有对应的属性，iOS 图像上特殊的色彩，改变不透明像素的颜色</td></tr></tbody></table><h2 id="Color-颜色"><a href="#Color-颜色" class="headerlink" title="Color 颜色"></a>Color 颜色</h2><p>React-Native 支持了 CSS 中大部分的颜色类型：</p><ul><li><code>#f00</code> (#rgb)</li><li><code>#f00c</code> (#rgba)：CSS 中无对应的值</li><li><code>#ff0000</code> (#rrggbb)</li><li><code>#ff0000cc</code> (#rrggbbaa)：CSS 中无对应的值</li><li><code>rgb(255, 0, 0)</code></li><li><code>rgba(255, 0, 0, 0.9)</code></li><li><code>hsl(360, 100%, 100%)</code></li><li><code>hsla(360, 100%, 100%, 0.9)</code></li><li><code>transparent</code></li><li>Color Name：支持了 基本颜色关键字 和 拓展颜色关键字，但不支持 28个系统颜色；</li></ul><h2 id="Pt-单位"><a href="#Pt-单位" class="headerlink" title="Pt 单位"></a>Pt 单位</h2><p>在 React-Native 中，目前仅支持 Number 这一种长度取值，并不支持百分比单位，目前只支持 pt 绝对长度单位，定义时不需要加单位。</p><h1 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h1><p><a href="https://juejin.im/post/5ae1685bf265da0b8a675199#heading-6">https://juejin.im/post/5ae1685bf265da0b8a675199#heading-6</a></p><h2 id="第三方图标库"><a href="#第三方图标库" class="headerlink" title="第三方图标库"></a>第三方图标库</h2><ol><li><p>安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-native-vector-icons</span><br></pre></td></tr></table></figure></li><li><p>自动链接，关联成功会在<code>android/app/src/main/assets/fonts</code>和<code>ios</code>中生成字体文件及配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native link react-native-vector-icons</span><br></pre></td></tr></table></figure></li><li><p>引入第三方字体图标库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Icon <span class="keyword">from</span> <span class="string">&#x27;react-native-vector-icons/FontAwesome&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>可用的图标名参考<a href="https://oblador.github.io/react-native-vector-icons/">https://oblador.github.io/react-native-vector-icons/</a></p></li><li><p>使用方式</p><ul><li><p>以标签形式使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;<span class="attr">home</span>&#x27;&#125; <span class="attr">size</span>=<span class="string">&#123;24&#125;</span> <span class="attr">color</span>=<span class="string">&#123;</span>&#x27;#<span class="attr">999</span>&#x27;&#125; /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在底部导航中使用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Home: &#123;</span><br><span class="line">  screen: HomeScreen,</span><br><span class="line">  navigationOptions: &#123;</span><br><span class="line">    tabBarLabel: &#x27;主页&#x27;,</span><br><span class="line">    tabBarIcon: (&#123;tintColor&#125;) =&gt; &#123;</span><br><span class="line">      return &lt;Icon name=&#123;&#x27;home&#x27;&#125; size=&#123;24&#125; color=&#123;tintColor&#125; /&gt;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在按钮中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Icon.Button</span> <span class="attr">name</span>=<span class="string">&quot;star&quot;</span> <span class="attr">backgroundColor</span>=<span class="string">&quot;#999999&quot;</span> <span class="attr">onPress</span>=<span class="string">&#123;this.starOnGithub&#125;</span>&gt;</span>Give me a star on Github<span class="tag">&lt;/<span class="name">Icon.Button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="自定义图标库"><a href="#自定义图标库" class="headerlink" title="自定义图标库"></a>自定义图标库</h2><ol><li><p>图标需上传至iconfont阿里矢量图标库，或选中图标添加至购物车下载代码</p></li><li><p>解压后将iconfont.ttf文件复制到<code>android/app/src/main/assets/fonts</code>目录中，并在<code>build.gradle</code>文件中添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project.ext.vectoricons &#x3D; [</span><br><span class="line">  iconFontNames: [ &#39;iconfont.ttf&#39; ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>iOS需要创建Fonts文件夹并添加到工程中，将iconfont.ttf放入其中，在Info.plist中Fonts provided by application下添加一行iconfont.ttf</p></li><li><p>以Text组件设置unicode字符的形式使用，fontFamily要设置为iconfont</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontFamily:</span> &#x27;<span class="attr">iconfont</span>&#x27;, <span class="attr">fontSize:</span> <span class="attr">20</span>, <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span><span class="symbol">&amp;#xe6e9;</span><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在底部导航中使用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Mine: &#123;</span><br><span class="line">    screen: MineScreen,</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      tabBarLabel: &#x27;我的&#x27;,</span><br><span class="line">      tabBarIcon: (&#123;tintColor&#125;) =&gt; &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;Text</span><br><span class="line">            style=&#123;&#123;fontFamily: &#x27;iconfont&#x27;, fontSize: 20, color: tintColor&#125;&#125;&gt;</span><br><span class="line">            &amp;#xe6eb;</span><br><span class="line">          &lt;/Text&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可用的unicode参考iconfont下载代码解压后的demo_index.html文件，使用数组循环批量显示时需要对unicode进行格式转换，如<code>&amp;#xe6a7;</code>转成<code>\ue6a7</code></p></li></ol><h1 id="请求通讯"><a href="#请求通讯" class="headerlink" title="请求通讯"></a>请求通讯</h1><p>在APP应用中安全机制与网页环境有所不同，没有跨域的限制，React Native中已经内置了ajaxAPI，因此可以使用基于此API封装的第三方请求库，如Axios（JQuery除外），但建议使用fetchAPI，该方法会返回Promise。</p><ul><li><p>GET请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;https://facebook.github.io/react-native/movies.json&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(responseJson.movies);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>POST请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;https://mywebsite.com/endpoint/&quot;</span>, &#123;</span><br><span class="line">  method: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Accept: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    firstParam: <span class="string">&quot;yourValue&quot;</span>,</span><br><span class="line">    secondParam: <span class="string">&quot;yourOtherValue&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(responseJson);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>组件加载完毕后，一般在componentDidMount这个生命周期中向服务器请求初始数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);   <span class="comment">//这一句不能省略，照抄即可</span></span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">        movies: <span class="literal">null</span>,  <span class="comment">//放自定义的state变量及初始值</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 在ES6中，如果在自定义的函数里使用了this关键字，则需要对其进行“绑定”操作，否则this的指向不对</span></span><br><span class="line">    <span class="built_in">this</span>.fetchData = <span class="built_in">this</span>.fetchData.bind(<span class="built_in">this</span>);</span><br><span class="line">&#125;,</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">this</span>.fetchData();</span><br><span class="line">&#125;,</span><br><span class="line">fetchData() &#123;</span><br><span class="line">    fetch(REQUEST_URL)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function">(<span class="params">responseData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这里使用了this关键字，为保证this在调用时仍然指向当前组件，我们需要对其进行“绑定”操作</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            movies: responseData.movies,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li>getDefaultProps：组件实例创建前调用，多个实例间共享引用。全局调用一次，组件自己不可以修改props，只可由其他组件调用它时在外部进行修改。</li><li>getInitalState：组件实例创建的时候调用的第一个函数。主要用于初始化state。为了在使用中不出现空值，建议初始化state的时候尽可能给每一个可能用到的值都赋一个初始值。</li><li>componentWillMount：仅调用一次，可用于改变state操作。</li><li>render：组件渲染函数，会返回一个虚拟DOM，只允许返回一个最外层容器组件。render函数尽量保持纯净，只渲染组件，不修改状态，不执行副操作（比如计时器）。</li><li>componentDidMount：在render渲染之后，会根据虚拟DOM来生成真实DOM，生成完毕后会调用该函数。主要在该函数中执行网络请求，定时器开启等相关操作。</li></ol><h2 id="运行中"><a href="#运行中" class="headerlink" title="运行中"></a>运行中</h2><ol start="6"><li>componentWillReceiveProps(nextProps)：props改变（父容器来更改或是redux），将会调用该函数。新的props将会作为参数传递进来，老的props可以根据this.props来获取。我们可以在该函数中对state作一些处理。在该函数中更新state不会引起二次渲染。</li><li>shouldComponentUpdate(object nextProps, object nextState)：该函数传递过来两个参数，新的state和新的props。state和props的改变都会调到该函数。该函数主要对传递过来的nextProps和nextState作判断。如果返回true则重新渲染，如果返回false则不重新渲染。在某些特定条件下，我们可以根据传递过来的props和state来选择更新或者不更新，从而提高效率。</li><li>componentWillUpdate(object nextProps, object nextState)：和componentWillMount类似，组件接收到新的props或者state渲染前调用该方法。但是不能在该方法中更新state和props。</li><li>render：跟初始化的时候功能一样。</li><li>componentDidUpdate(object prevProps,object prevState)：和componentDidMount类似，在render之后，真实DOM生成之后调用该函数。传递过来的是当前的props和state。如果需要在运行中执行某些副操作，可在该函数中完成。</li></ol><h2 id="销毁时"><a href="#销毁时" class="headerlink" title="销毁时"></a>销毁时</h2><ol start="11"><li>componentWillUnmount：组件DOM移除时调用。可在这里进行销毁定时器，监听等操作。</li></ol><h1 id="Webview"><a href="#Webview" class="headerlink" title="Webview"></a>Webview</h1><ol><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-native-webview</span><br></pre></td></tr></table></figure></li><li><p>自动链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native link react-native-webview</span><br></pre></td></tr></table></figure></li><li><p>页面中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;WebView&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-webview&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h1 id="修改图标应用名"><a href="#修改图标应用名" class="headerlink" title="修改图标应用名"></a>修改图标应用名</h1><ul><li><p>Android：</p><ul><li>图标:<br>将logo拖到app icon gear中 生成四个规格的图标，分别放到<code>android/app/src/main/res</code>下的四个文件夹中，命名为ic_launcher.png没有对应上的文件夹放一张1024x1024或者512x512的即可</li><li>app名称:<br>在<code>android/app/src/main/res/values/strings.xml</code>中更改</li></ul></li></ul><ul><li><p>iOS:</p><ul><li>图标:<br>  xcode &gt; 根目录 &gt; Images.xcassets 将生成的图标拖入对应的位置</li><li>app名称:<br>  xcode &gt; 根目录 &gt; Info.plist 中修改 Bundlename 和 General &gt; DIsplay Name</li></ul></li></ul><h1 id="条件渲染与组件传值"><a href="#条件渲染与组件传值" class="headerlink" title="条件渲染与组件传值"></a>条件渲染与组件传值</h1><p>由于页面跳转错误的使用了createSwitchNavigator方法，导致浏览器A页面跳转至二维码B页面时，A页面就会销毁，从B页面跳转回A页面将重新渲染，从而失去浏览器历史，即使在跳转前保存A页面的浏览器路径，A页面重新渲染时直接给webview赋值该路径，也无法在webview中进行页面后退。<br><strong>该问题将createSwitchNavigator改为createStackNavigator即可解决。</strong><br>但没有发现页面跳转方式错误时，使用了以下不进行页面跳转，转而使用条件渲染的解决方式，缺点在于二维码组件必须使用定位使其浮与webview上方，并且标签要插入在webview之后，确保显示时能覆盖住webview不会造成布局错乱，而且将来若组件增加，使用该方法可能会影响性能。</p><ol><li><p>在webview页面引入二维码组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;StyleSheet, Text, View, Platform, BackHandler&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ActionButton, QRCode&#125; <span class="keyword">from</span> <span class="string">&#x27;../elements/ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;WebView&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-webview&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>在state中定义开关变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">        webUrl: WEB_URL,</span><br><span class="line">        scalesPageToFit: <span class="literal">false</span>,</span><br><span class="line">        showQRCode: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在具体事件中触发调整二维码组件的开关显示，此处根据H5页面传递的字符串判断触发什么事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;QRCode&#x27;</span>:</span><br><span class="line">   <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      showQRCode: <span class="literal">true</span>,</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li><li><p>渲染时根据state中的开关状态决定是否显示二维码组件，并且给接收子组件传值的自定义事件绑定this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">let</span> userMessage;</span><br><span class="line">    <span class="keyword">const</span> &#123;showQRCode&#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">if</span> (showQRCode) &#123;</span><br><span class="line">        userMessage = <span class="xml"><span class="tag">&lt;<span class="name">QRCode</span> <span class="attr">_showQRCode</span>=<span class="string">&#123;this._showQRCode.bind(this)&#125;</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;View style=&#123;styles.view&#125;&gt;</span><br><span class="line">            &lt;WebView ref=&#123;WEB_VIEW_REF&#125; source=&#123;&#123;<span class="attr">uri</span>: <span class="built_in">this</span>.state.webUrl&#125;&#125; /&gt;</span><br><span class="line">            &#123;userMessage&#125;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义事件接收二维码子组件传递的值，子组件传来识别出的二维码数据则关闭组件开关不显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_showQRCode(showQRCode, data) &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        showQRCode: showQRCode,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子组件在特定事件中给父组件传值，此处为识别二维码事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onBarCodeRead = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = result;</span><br><span class="line">    <span class="keyword">const</span> showQRCode = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.props._showQRCode(showQRCode, data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="签名打包"><a href="#签名打包" class="headerlink" title="签名打包"></a>签名打包</h1><ul><li><p>Android（使用Android Studio打包）</p><ol><li>用Android Studio打开RN项目中的android目录，</li></ol></li><li><p>iOS</p></li></ul><h1 id="Detox"><a href="#Detox" class="headerlink" title="Detox"></a>Detox</h1><p>detox build -c windows.android.emu.release<br>detox test -c windows.android.emu.release E:/sunline/gitlab/Granada-dev/e2e/bankingTest.spec.js</p><p>cd C:\Users\Lenovo\AppData\Local\Android\Sdk\platform-tools<br>adb reverse tcp:8081 tcp:8081，在app里调出调试菜单点reload</p><p>react-native bundle –platform android –dev false –entry-file index.js –bundle-output android/app/src/main/assets/index.android.bundle –assets-dest android/app/src/main/res</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 移动端 </tag>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收集一些前端常用的正则表达式</title>
      <link href="/hexoBlog/posts/491374834/"/>
      <url>/hexoBlog/posts/491374834/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/6844904119463837704">https://juejin.im/post/6844904119463837704</a></p><h1 id="数字检验"><a href="#数字检验" class="headerlink" title="数字检验"></a>数字检验</h1><ul><li>非零、非负、浮点数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?:[1-9][0-9]*(?:\.[0-9]+)?|0\.(?!0+$)[0-9]+)$</span><br></pre></td></tr></table></figure><ul><li>非负、两位小数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)</span><br></pre></td></tr></table></figure><ul><li>非零、非负、两位小数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(1)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)</span><br></pre></td></tr></table></figure><ul><li>零和非零开头的数字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(0|1-9*)$</span><br></pre></td></tr></table></figure><ul><li>非零开头的最多带两位小数的数字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(1-9*)+(.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><ul><li>带1-2位小数的正数或负数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><ul><li>正数、负数、和小数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\-|\+)?\d+(\.\d+)?$</span><br></pre></td></tr></table></figure><ul><li>有两位小数的正实数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br></pre></td></tr></table></figure><ul><li>有1~3位小数的正实数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br></pre></td></tr></table></figure><ul><li>非零的正整数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$</span><br></pre></td></tr></table></figure><ul><li>非零的负整数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\-[1-9][]0-9″*$ 或 ^-[1-9]\d*$</span><br></pre></td></tr></table></figure><ul><li>非负整数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+$ 或 ^[1-9]\d*|0$</span><br></pre></td></tr></table></figure><ul><li>非正整数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br></pre></td></tr></table></figure><ul><li>非负浮点数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span><br></pre></td></tr></table></figure><ul><li>非正浮点数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span><br></pre></td></tr></table></figure><ul><li>正浮点数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br></pre></td></tr></table></figure><ul><li>负浮点数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br></pre></td></tr></table></figure><ul><li>浮点数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span><br></pre></td></tr></table></figure><h1 id="字符判断"><a href="#字符判断" class="headerlink" title="字符判断"></a>字符判断</h1><ul><li>汉字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\u4e00-\u9fa5]&#123;0,&#125;$</span><br></pre></td></tr></table></figure><ul><li>英文和数字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span><br></pre></td></tr></table></figure><ul><li>长度为3-20的所有字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^.&#123;3,20&#125;$</span><br></pre></td></tr></table></figure><ul><li>由26个英文字母组成的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z]+$</span><br></pre></td></tr></table></figure><ul><li>由26个大写英文字母组成的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Z]+$</span><br></pre></td></tr></table></figure><ul><li>由26个小写英文字母组成的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-z]+$</span><br></pre></td></tr></table></figure><ul><li>由数字和26个英文字母组成的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z0-9]+$</span><br></pre></td></tr></table></figure><ul><li>由数字、26个英文字母或者下划线组成的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\w+$ 或 ^\w&#123;3,20&#125;$</span><br></pre></td></tr></table></figure><ul><li>中文、英文、数字包括下划线</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br></pre></td></tr></table></figure><ul><li>中文、英文、数字但不包括下划线等符号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span><br></pre></td></tr></table></figure><ul><li>可以输入含有^%&amp;’,;=?$\”等字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^%&amp;&#39;,;&#x3D;?$\x22]+</span><br></pre></td></tr></table></figure><ul><li>禁止输入含有~的字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^~\x22]+</span><br></pre></td></tr></table></figure><h1 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h1><ul><li>Email地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br></pre></td></tr></table></figure><ul><li>域名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(&#x2F;.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+&#x2F;.?</span><br></pre></td></tr></table></figure><ul><li>InternetURL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-z]+:&#x2F;&#x2F;[^\s]* 或 ^http:&#x2F;&#x2F;([\w-]+\.)+[\w-]+(&#x2F;[\w-.&#x2F;?%&amp;&#x3D;]*)?$</span><br></pre></td></tr></table></figure><ul><li>手机号码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br></pre></td></tr></table></figure><ul><li>国内电话号码(0511-4405222、021-87888822)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span><br></pre></td></tr></table></figure><ul><li>身份证号(15位、18位数字)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;15&#125;|\d&#123;18&#125;$</span><br></pre></td></tr></table></figure><ul><li>短身份证号码(数字、字母x结尾)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</span><br></pre></td></tr></table></figure><ul><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br></pre></td></tr></table></figure><ul><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z]\w&#123;5,17&#125;$</span><br></pre></td></tr></table></figure><ul><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?&#x3D;.*\d)(?&#x3D;.*[a-z])(?&#x3D;.*[A-Z]).&#123;8,10&#125;$</span><br></pre></td></tr></table></figure><ul><li>日期格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br></pre></td></tr></table></figure><ul><li>一年的12个月(01～09和1～12)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(0?[1-9]|1[0-2])$</span><br></pre></td></tr></table></figure><ul><li>一个月的31天(01～09和1～31)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((0?[1-9])|((1|2)[0-9])|30|31)$</span><br></pre></td></tr></table></figure><ul><li>有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00″, 和没有 “分” 的 “10000″ 和 “10,000″</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[1-9][0-9]*$</span><br></pre></td></tr></table></figure><ul><li>这表示任意一个不以0开头的数字，但是，这也意味着一个字符”0″不通过，所以我们采用下面的形式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(0|[1-9][0-9]*)$</span><br></pre></td></tr></table></figure><ul><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(0|-?[1-9][0-9]*)$</span><br></pre></td></tr></table></figure><ul><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉，因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]+)?$</span><br></pre></td></tr></table></figure><ul><li>必须说明的是，小数点后面至少应该有1位数，所以”10.”是不通过的，但是 “10″ 和 “10.2″ 是通过的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br></pre></td></tr></table></figure><ul><li>这样我们规定小数点后面必须有两位，如果你认为太苛刻了，可以这样</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]+(.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><ul><li>这样就允许用户只写一位小数。下面我们该考虑数字中的逗号了，我们可以这样</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><ul><li>1到3个数字，后面跟着任意个 逗号+3个数字，逗号成为可选，而不是必须</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$</span><br></pre></td></tr></table></figure><ul><li>xml文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span><br></pre></td></tr></table></figure><ul><li>中文字符的正则表达式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\u4e00-\u9fa5]</span><br></pre></td></tr></table></figure><ul><li>双字节字符(包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^\x00-\xff]</span><br></pre></td></tr></table></figure><ul><li>空白行的正则表达式(可以用来删除空白行)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\n\s*\r</span><br></pre></td></tr></table></figure><ul><li>HTML标记的正则表达式(网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? &#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li>首尾空白字符的正则表达式(可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\s*|\s*$或(^\s*)|(\s*$)</span><br></pre></td></tr></table></figure><ul><li>腾讯QQ号(腾讯QQ号从10000开始)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1-9][0-9]&#123;4,&#125;</span><br></pre></td></tr></table></figure><ul><li>中国邮政编码(中国邮政编码为6位数字)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1-9]\d&#123;5&#125;(?!\d)</span><br></pre></td></tr></table></figure><ul><li>IP地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pattern &#x3D; &#x2F;^.*(?&#x3D;.&#123;6,&#125;)(?&#x3D;.*\d)(?&#x3D;.*[A-Z])(?&#x3D;.*[a-z])(?&#x3D;.*[!@#$%^&amp;*? ]).*$&#x2F;;</span><br></pre></td></tr></table></figure><p>关于密码强度验证更多的内容可参见：基于规则评分的密码强度检测算法分析及实现。<a href="https://yq.aliyun.com/articles/590540">https://yq.aliyun.com/articles/590540</a></p><ul><li>数字相关正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var posPattern &#x3D; &#x2F;^\d+$&#x2F;; &#x2F;&#x2F; 正整数正则</span><br><span class="line">var negPattern &#x3D; &#x2F;^-\d*\.\d+$&#x2F;; &#x2F;&#x2F; 负浮点数正则</span><br><span class="line">var posPattern &#x3D; &#x2F;^\d*\.?\d+$&#x2F;; &#x2F;&#x2F; 正数正则</span><br><span class="line">var numPattern &#x3D; &#x2F;^-?\d*\.?\d+$&#x2F;; &#x2F;&#x2F; 数字正则</span><br></pre></td></tr></table></figure><ul><li>通用日期正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var dP2 &#x3D; &#x2F;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>基本Email正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pattern &#x3D; &#x2F;^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>特定域名Email正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pattern &#x3D; &#x2F;^([A-Za-z0-9_\-\.])+\@(163.com|qq.com)$&#x2F;;</span><br></pre></td></tr></table></figure><p>此方法虽然能保证验证安全性，但是如果白名单太长会造成模式字符串太长。这时可以将邮箱域名白名单写成数组，利用正则表达式做初步验证，用白名单做域名的二次验证。<br>常用域名白名单数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var domains&#x3D; [&quot;qq.com&quot;,&quot;163.com&quot;,&quot;vip.163.com&quot;,&quot;263.net&quot;,&quot;yeah.net&quot;,&quot;sohu.com&quot;,&quot;sina.cn&quot;,&quot;sina.com&quot;,&quot;eyou.com&quot;,&quot;gmail.com&quot;,&quot;hotmail.com&quot;];</span><br></pre></td></tr></table></figure><ul><li>手机号码正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var mPattern &#x3D; &#x2F;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\d&#123;8&#125;$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>身份证号（18位）正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var cP &#x3D; &#x2F;^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$&#x2F;;</span><br></pre></td></tr></table></figure><p>上述正则只能对身份证号进行基本的通过性判定，关于公民身份号码判定的更多内容可参见文档：公民身份号码正确性判定及程序实现<a href="https://juejin.im/entry/6844903811815833614">https://juejin.im/entry/6844903811815833614</a></p><ul><li>URL正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var urlP&#x3D; &#x2F;^((https?|ftp|file):\&#x2F;\&#x2F;)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\&#x2F;\w \.-]*)*\&#x2F;?$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>IPv4地址正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ipP &#x3D; &#x2F;^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>IPv6地址正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pattern &#x3D; &#x2F;(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7,7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]&#123;1,&#125;|::(ffff(:0&#123;1,4&#125;)&#123;0,1&#125;:)&#123;0,1&#125;((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9]))&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>十六进制颜色正则 / RGB Hex颜色正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var cPattern &#x3D; &#x2F;^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>QQ号正则，5至11位</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var qqPattern &#x3D; &#x2F;^[1-9][0-9]&#123;4,10&#125;$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var wxPattern &#x3D; &#x2F;^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>车牌号正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var cPattern &#x3D; &#x2F;^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>包含中文正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var cnPattern &#x3D; &#x2F;[\u4E00-\u9FA5]&#x2F;;</span><br></pre></td></tr></table></figure><ul><li>中国邮编(中国邮政编码为6位数字)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pattern &#x3D; &#x2F;^[1-9]\d&#123;5&#125;(?!\d)$&#x2F;</span><br></pre></td></tr></table></figure><ul><li>空白行的正则表达式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pattern &#x3D; &#x2F;\n\s*\r&#x2F; (可以用来删除空白行)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海绵蛋糕</title>
      <link href="/hexoBlog/posts/3165947507/"/>
      <url>/hexoBlog/posts/3165947507/</url>
      
        <content type="html"><![CDATA[<p>　　海绵蛋糕是利用蛋白起泡性能使蛋液中充入大量的空气，加入面粉烘烤而成的一类膨松点心，因为其结构类似于多孔的海绵而得名，也有称为泡沫蛋糕或清蛋糕。</p><h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><table><thead><tr><th>名称</th><th>用量</th><th>名称</th><th>用量</th></tr></thead><tbody><tr><td>低筋面粉</td><td>70g</td><td>黄油</td><td>30g</td></tr><tr><td>细砂糖</td><td>50g</td><td>牛奶</td><td>30g</td></tr><tr><td>泡打粉</td><td>2g</td><td>鸡蛋</td><td>3个</td></tr><tr><td>细盐</td><td>1g</td><td>柠檬汁</td><td>1g</td></tr></tbody></table><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>低筋面粉过筛三次；</li><li>鸡蛋打散加白砂糖打发；</li><li>蛋糊中加低筋面粉翻拌均匀；</li><li>牛奶和融化黄油搅至乳化加入少量面糊搅匀；</li><li>牛奶糊再加入面糊中翻拌均匀。</li></ol><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li>温度：烤箱中下层、上下火<mark> 160° </mark>，具体看烤箱火力</li><li>时长：约<mark> 60分钟 </mark>，具体看上色程度</li><li>份量：<mark> 6寸 </mark>圆模</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>全蛋打发最适宜也是效率最高的温度在40度左右，要把打蛋盆座在50度的热水中隔热水打发；</li><li>打发到位的全蛋依然很容易消泡，建议全蛋打发到位后再稍微多打一会儿，以免消泡过多；</li><li>牛奶和黄油不容易与面糊混合，可以先舀出一部分面糊和它混合均匀，再倒入打蛋盆翻拌；</li><li>打发的时候要把大气泡打碎，进烤箱前也要震两下，把大气泡震出去。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 手工 </category>
          
          <category> 烘焙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 烘焙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>戚风蛋糕</title>
      <link href="/hexoBlog/posts/672204972/"/>
      <url>/hexoBlog/posts/672204972/</url>
      
        <content type="html"><![CDATA[<p>　　戚风蛋糕是Chiffon Cake的音译，单看名字就知道是一种细腻柔软如丝绸般质感的蛋糕，口感非常的绵软湿润，组织膨松，是最受欢迎的蛋糕之一。</p><h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><table><thead><tr><th>名称</th><th>用量</th><th>名称</th><th>用量</th></tr></thead><tbody><tr><td>低筋面粉</td><td>50g</td><td>玉米油</td><td>25g</td></tr><tr><td>玉米淀粉</td><td>10g</td><td>牛奶</td><td>60g</td></tr><tr><td>细砂糖</td><td>40g</td><td>鸡蛋</td><td>3个</td></tr><tr><td>细盐</td><td>1g</td><td>柠檬汁</td><td>1g</td></tr></tbody></table><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>称量好所有材料，分离蛋黄和蛋清，蛋清冷藏；</li><li>牛奶、玉米油与1/3白砂糖一起搅拌至乳化且没有明显糖粒后，加入蛋黄以z型方式搅匀；</li><li>低筋面粉和玉米淀粉混合过筛，加入蛋黄液中均匀混合至没有明显粉块；</li><li>蛋清加入柠檬汁，并分三次加入剩余白砂糖打至干性发泡；</li><li>预热烤箱，将蛋白霜分三次加入蛋黄糊中翻拌均匀。</li></ol><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li>温度：烤箱中下层、上下火<mark> 150° </mark>，具体看烤箱火力</li><li>时长：约<mark> 60分钟 </mark>，具体看上色程度</li><li>份量：<mark> 6寸 </mark>圆模</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>鸡蛋的新鲜程度会影响蛋糕的品质；</li><li>蛋白的打发，正确的搅拌对戚风的成功至关重要；</li><li>垫油纸或使用不粘模具都会影响戚风爬高；</li><li>烘烤过程中面糊会膨发涨高，表面或许会出现爆裂，不必在意。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 手工 </category>
          
          <category> 烘焙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 烘焙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蛋白糖</title>
      <link href="/hexoBlog/posts/3715814593/"/>
      <url>/hexoBlog/posts/3715814593/</url>
      
        <content type="html"><![CDATA[<p>　　蛋白糖由砂糖加入蛋白等材料制成，糖体轻脆、外酥内软、口感细腻，可以搭配牛奶、咖啡等饮品，不仅样子好看，而且操作简单、材料普遍，新手也能做出唯美的小甜点。</p><h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><table><thead><tr><th>名称</th><th>用量</th><th>名称</th><th>用量</th></tr></thead><tbody><tr><td>细砂糖</td><td>20g</td><td>蛋清</td><td>1个</td></tr><tr><td>玉米淀粉</td><td>3g</td><td>柠檬汁</td><td>2g</td></tr></tbody></table><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>蛋清中滴入柠檬汁，分三次加细砂糖打至硬性发泡；</li><li>玉米淀粉筛入蛋白霜中翻拌均匀；</li><li>烤箱预热，蛋白糊在油纸上间隔的挤出花纹。</li></ol><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li>温度：烤箱中层、上下火<mark> 90° </mark>，具体看烤箱火力</li><li>时长：约<mark> 60分钟 </mark>，具体看上色程度</li><li>份量：约<mark> 80颗 </mark>，具体看每颗份量</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>蛋白的质量和打发程度都影响蛋白糖品质；</li><li>冷冻至有细小冰渣的蛋白稳定性较好；</li><li>出炉后凉透才会变硬，凉透后需要及时密封。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 手工 </category>
          
          <category> 烘焙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 烘焙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奶香黄油曲奇</title>
      <link href="/hexoBlog/posts/312265431/"/>
      <url>/hexoBlog/posts/312265431/</url>
      
        <content type="html"><![CDATA[<p>　　曲奇来源于英语cookie的译音，由荷兰语koekje演变而来，意为“小蛋榚”，在美国与加拿大解释为细小而扁平的蛋榚式的饼干。</p><h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><table><thead><tr><th>名称</th><th>用量</th><th>名称</th><th>用量</th></tr></thead><tbody><tr><td>无盐黄油</td><td>130g</td><td>低筋面粉</td><td>150g</td></tr><tr><td>牛奶</td><td>30g</td><td>细砂糖</td><td>50g</td></tr><tr><td>蛋黄</td><td>1个</td><td>奶粉</td><td>10g</td></tr></tbody></table><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>无盐黄油切小块室温软化，牛奶加热溶解细砂糖和奶粉；</li><li>黄油中分次加入奶糖液打发，加蛋黄打至顺滑膏状；</li><li>低筋面粉筛入黄油膏中切拌均匀；</li><li>烤箱预热，面糊在油纸上间隔的挤出花纹。</li></ol><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li>温度：烤箱中层、上下火<mark> 160° </mark>，具体看烤箱火力</li><li>时长：约<mark> 13分钟 </mark>，具体看上色程度</li><li>份量：约<mark> 30块 </mark>，具体看每块份量</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>黄油需要充分软化、充分打发，黄油软化打发到位，即使是冬天也不会难挤；</li><li>牛奶糖水天热时需要充分冷却，冬天稍稍放温即可；</li><li>挤花的时候裱花嘴和烤盘的距离1cm左右为宜，太贴近烤盘成品太扁不好看且容易烤焦；</li><li>挤入烤盘时注意留出足够的距离，以免粘连。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 手工 </category>
          
          <category> 烘焙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 烘焙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宫廷桃酥</title>
      <link href="/hexoBlog/posts/1936861870/"/>
      <url>/hexoBlog/posts/1936861870/</url>
      
        <content type="html"><![CDATA[<p>　　相传唐元时期，有一位农民将面粉搅拌后放在窑炉表面烘焙，由于其有食桃仁止咳的习惯，故加入桃仁碎末，此做法便于日常保存和长途运送瓷器的时候食用，因此渐渐流传开来。</p><h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><table><thead><tr><th>名称</th><th>用量</th><th>名称</th><th>用量</th></tr></thead><tbody><tr><td>低筋面粉</td><td>100g</td><td>无盐黄油</td><td>50g</td></tr><tr><td>高筋面粉</td><td>85g</td><td>玉米油</td><td>50g</td></tr><tr><td>细砂糖</td><td>85g</td><td>鸡蛋</td><td>20g</td></tr><tr><td>细盐</td><td>1g</td><td>核桃碎</td><td>20g</td></tr><tr><td>小苏打</td><td>3g</td><td>泡打粉</td><td>2g</td></tr></tbody></table><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>无盐黄油切小块室温软化，加入细砂糖和细盐搅匀后打发；</li><li>分次加入玉米油、打散的蛋液至黄油膏中搅打融合；</li><li>粉类材料混合筛入黄油膏中抓拌成光滑的面团，醒发30分钟；</li><li>烤箱预热，面团分成大小均匀的圆球，捏成桃酥状撒上核桃碎；</li></ol><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li>温度：烤箱中层、上下火<mark> 160° </mark>，具体看烤箱火力</li><li>时长：约<mark> 10分钟 </mark>，具体看上色程度</li><li>份量：约<mark> 20块 </mark>，具体看每块份量</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>制作桃酥时面团不宜太干，不要为了健康大量减少油类，面团也不要揉的太瓷实，会导致成品干硬不酥脆。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 手工 </category>
          
          <category> 烘焙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 烘焙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玛格丽特饼干</title>
      <link href="/hexoBlog/posts/2595555054/"/>
      <url>/hexoBlog/posts/2595555054/</url>
      
        <content type="html"><![CDATA[<p>　　全称为“住在意大利史特蕾莎的玛格丽特小姐”，据说是一位面点师爱上了玛格丽特小姐，于是做了这款甜点作为纪念，它制作简单，失败率低，香酥可口，可以说是新手最佳入门饼干。</p><h1 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h1><table><thead><tr><th>名称</th><th>用量</th><th>名称</th><th>用量</th></tr></thead><tbody><tr><td>低筋面粉</td><td>50g</td><td>无盐黄油</td><td>50g</td></tr><tr><td>玉米淀粉</td><td>50g</td><td>熟蛋黄</td><td>1个</td></tr><tr><td>细砂糖</td><td>30g</td><td></td><td></td></tr></tbody></table><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>无盐黄油切小块室温软化，加入细砂糖搅匀后打发；</li><li>熟蛋黄过筛成细粉，和粉类材料混合筛入黄油膏中翻拌均匀；</li><li>粉糊揉成光滑的面团，放入冰箱冷藏醒发30分钟；</li><li>烤箱预热，冷藏过的面团分成大小均匀的圆球，用拇指按出裂纹。</li></ol><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li>温度：烤箱中层、上下火<mark> 160° </mark>，具体看烤箱火力</li><li>时长：约<mark> 15分钟 </mark>，具体看上色程度</li><li>份量：约<mark> 20块 </mark>，具体看每块份量</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>煮蛋的时候凉水下锅浸泡几分钟，再开中火直到水沸，水沸后大约煮8分钟捞出，放在凉水里冷却，这个程度的蛋黄更易过筛；</li><li>熟蛋黄不好过筛，过筛的时候用手指或勺子用力按压，将蛋黄挤压通过筛网就可以了；</li><li>冷藏后的面团更干硬，用拇指按的时候容易绽放出漂亮的裂纹，实在不行也可以不冷藏。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 手工 </category>
          
          <category> 烘焙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 烘焙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减脂记录</title>
      <link href="/hexoBlog/posts/784063060/"/>
      <url>/hexoBlog/posts/784063060/</url>
      
        <content type="html"><![CDATA[<h1 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h1><ul><li>早餐：习惯性不吃早餐</li><li>午餐：几乎都是钟爱的铁板或叉烧饭</li><li>晚餐：正好赶上过生日和部门聚餐、周二周四分别去了海底捞和自助餐、都是吃到扶墙出…</li><li>运动：可以说是完全没有认真运动的一周</li><li>总结：这周吃的不少、运动不多、行动上好像还没认真减肥的感觉？不过体重意外的居然没涨</li></ul><div id="echarts8852" style="width: 85%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcss.com/echarts/4.1.0-release/echarts.min.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts8852'));        // 指定图表的配置项和数据        var option = {    color: '#fe9800',    title: {        text: '体重变化趋势图',        left: 'center'    },    xAxis: {        type: 'category',        data: ['10-12','10-13','10-14','10-15','10-16','10-17','10-18']    },    yAxis: {        type: 'value',        min: 'dataMin',        max: 'dataMax'    },    series: [        {            name:'体重',            type:'line',            label: {                normal: {                           show: true,                    position: 'top'                }            },            data:[121.0, 121.0, 120.8, 120.7, 120.5, 120, 120]        }    ]}        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><h1 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h1><ul><li>早餐：依然日常不吃早餐</li><li>午餐：</li><li>晚餐：</li><li>运动：</li><li>总结：</li></ul><div id="echarts2966" style="width: 85%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcss.com/echarts/4.1.0-release/echarts.min.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts2966'));        // 指定图表的配置项和数据        var option = {    color: '#fe9800',    title: {        text: '体重变化趋势图',        left: 'center'    },    xAxis: {        type: 'category',        data: ['10-19','10-20','10-21','10-22','10-23','10-24','10-25']    },    yAxis: {        type: 'value',        min: 'dataMin',        max: 'dataMax'    },    series: [        {            name:'体重',            type:'line',            label: {                normal: {                           show: true,                    position: 'top'                }            },            data:[120, 120, 120, 120, 120, 120, 120]        }    ]}        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
